// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoMailClient is the client API for CryptoMail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoMailClient interface {
	IsLoggedIn(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Bool, error)
}

type cryptoMailClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoMailClient(cc grpc.ClientConnInterface) CryptoMailClient {
	return &cryptoMailClient{cc}
}

func (c *cryptoMailClient) IsLoggedIn(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/cryptomail.CryptoMail/IsLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoMailServer is the server API for CryptoMail service.
// All implementations must embed UnimplementedCryptoMailServer
// for forward compatibility
type CryptoMailServer interface {
	IsLoggedIn(context.Context, *Null) (*Bool, error)
	mustEmbedUnimplementedCryptoMailServer()
}

// UnimplementedCryptoMailServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoMailServer struct {
}

func (UnimplementedCryptoMailServer) IsLoggedIn(context.Context, *Null) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoggedIn not implemented")
}
func (UnimplementedCryptoMailServer) mustEmbedUnimplementedCryptoMailServer() {}

// UnsafeCryptoMailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoMailServer will
// result in compilation errors.
type UnsafeCryptoMailServer interface {
	mustEmbedUnimplementedCryptoMailServer()
}

func RegisterCryptoMailServer(s grpc.ServiceRegistrar, srv CryptoMailServer) {
	s.RegisterService(&CryptoMail_ServiceDesc, srv)
}

func _CryptoMail_IsLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoMailServer).IsLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptomail.CryptoMail/IsLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoMailServer).IsLoggedIn(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoMail_ServiceDesc is the grpc.ServiceDesc for CryptoMail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoMail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptomail.CryptoMail",
	HandlerType: (*CryptoMailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLoggedIn",
			Handler:    _CryptoMail_IsLoggedIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/cryptomail.proto",
}
